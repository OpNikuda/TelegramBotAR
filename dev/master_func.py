from telebot import types
from dict import ridles
import random

def get_random_riddle_beginner():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–≥–∞–¥–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ (beginner).
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –∑–∞–≥–∞–¥–∫–æ–π –∏ –æ—Ç–≤–µ—Ç–æ–º.
    """
    beginner, _, _ = ridles()  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ beginner
    return random.choice(beginner)

def get_random_riddle_intermediate():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–≥–∞–¥–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ (intermediate).
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –∑–∞–≥–∞–¥–∫–æ–π –∏ –æ—Ç–≤–µ—Ç–æ–º.
    """
    _, _, intermediate = ridles()  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ intermediate
    return random.choice(intermediate)

def get_random_riddle_advanced():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–≥–∞–¥–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ (advanced).
    Returns:
        dict: –°–ª–æ–≤–∞—Ä—å —Å –∑–∞–≥–∞–¥–∫–æ–π –∏ –æ—Ç–≤–µ—Ç–æ–º.
    """
    _, advanced, _ = ridles()  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ advanced
    return random.choice(advanced)

def create_riddle_markup():
    """
    –°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–≥–∞–¥–æ–∫.
    Returns:
        types.InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç–∏—Ç—å".
    """
    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data='answer_riddle')
    markup.add(btn)
    return markup

def check_riddle_answer(user_answer, correct_answer):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∑–∞–≥–∞–¥–∫—É.
    Args:
        user_answer (str): –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        correct_answer (str): –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.
    Returns:
        str: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏.
    """
    if user_answer.lower() == correct_answer.lower():
        return "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ"
    else:
        return f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}."

def create_new_keyboard_yes_no():
    """
    –°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ 'Yes' –∏ 'No'.
    Returns:
        types.InlineKeyboardMarkup: Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ 'Yes' –∏ 'No'.
    """
    markup = types.InlineKeyboardMarkup()
    yes_button = types.InlineKeyboardButton('Yes', callback_data='yes')
    no_button = types.InlineKeyboardButton('No', callback_data='no')
    markup.add(yes_button, no_button)
    return markup

def create_new_keyboard_yes():
    """
    –°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ 'Yes'.
    Returns:
        types.InlineKeyboardMarkup: Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏:
            - Puzzles
            - Explore Vocabulary
            - Practice Grammar
            - Back
    """
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("Puzzles", callback_data='puzzle')
    btn2 = types.InlineKeyboardButton("Explore Vocabulary", callback_data='explore_vocabulary')
    btn3 = types.InlineKeyboardButton("Practice Grammar", callback_data='practice_grammar')
    btn4 = types.InlineKeyboardButton("Back", callback_data='back')
    markup.add(btn1, btn2, btn3, btn4)
    return markup

def create_learn_response():
    """
    –°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.
    Returns:
        tuple: –ö–æ—Ä—Ç–µ–∂ –∏–∑ –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
            - markup (types.InlineKeyboardMarkup): Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏.
            - text (str): –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–º–µ—Å—Ç–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    """
    text = (
        f'Welcome, language adventurers!\n'
        f'Are you ready to embark on a journey through the fascinating world of English?\n'
        'To tailor your experience, we invite you to select your preferred level of challenge'
    )
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('Beginner', callback_data='beginner')
    btn2 = types.InlineKeyboardButton('Advanced', callback_data='advanced')
    btn3 = types.InlineKeyboardButton('Intermediate', callback_data='intermediate')
    btn4 = types.InlineKeyboardButton('Back', callback_data='back')
    markup.add(btn1, btn2, btn3, btn4)
    return markup, text

def beginner_learning():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É—Ä–æ–≤–Ω—è Beginner.
    Returns:
        tuple: –ö–æ—Ä—Ç–µ–∂ –∏–∑ –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
            - text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
            - markup (types.InlineKeyboardMarkup): Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    text = (
        f"–ê, —è –≤–∏–∂—É, —Ç—ã –≤—ã–±—Ä–∞–ª —É—Ä–æ–≤–µ–Ω—å Beginner!\n"
        f"Well choice, –º–æ–π –¥—Ä—É–≥. üßô‚Äç‚ôÇÔ∏è\n"
        f"–î–∞–∂–µ –≤–µ–ª–∏—á–∞–π—à–∏–µ wizards –Ω–∞—á–∏–Ω–∞–ª–∏ —Å –ø—Ä–æ—Å—Ç—ã—Ö spells, –∞ —Å–∞–º—ã–µ mighty dragons –∫–æ–≥–¥–∞-—Ç–æ –±—ã–ª–∏ tiny hatchlings.\n"
        f"–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Ç–≤–æ–µ journey —Å –≤–µ—Å–µ–ª—ã—Ö –∏ –ª–µ–≥–∫–∏—Ö riddles. –ù–µ worry, —è –Ω–µ –±—É–¥—É –∫–∏–¥–∞—Ç—å –≤ —Ç–µ–±—è fireballs... –ø–æ–∫–∞ —á—Ç–æ. üî•\n"
        f"–¢—ã –≥–æ—Ç–æ–≤ unlock secrets Beginner's Chest? üéÅ\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ 'Go', –∏ let the adventure begin!"
    )
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('Go', callback_data='go')
    btn2 = types.InlineKeyboardButton('Back', callback_data='back')
    markup.add(btn1, btn2)
    return text, markup

def advanced_learning():
    text = (
        f'Excellent choice! üåü You‚Äôre about to embark on a journey of intricate riddles that will not only challenge your intellect but also enrich your vocabulary. üß†‚ú®'
    )
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('Go', callback_data='go')
    btn2 = types.InlineKeyboardButton('Back', callback_data='back')
    markup.add(btn1, btn2)
    return text, markup

def intermediate_learning():
    text = (
        f'Great choice! üéâ Let‚Äôs dive into some intermediate riddles that will challenge your mind and help you learn new words!'
    )
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('Go', callback_data='go')
    btn2 = types.InlineKeyboardButton('Back', callback_data='back')
    markup.add(btn1, btn2)
    return text, markup

def get_vocabulary_response():
    """
    –°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ 'Bebra' –∏ 'Brb'.
    Returns:
        tuple: –ö–æ—Ä—Ç–µ–∂ –∏–∑ –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
            - markup (types.InlineKeyboardMarkup): Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏.
            - text (str): –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–º–µ—Å—Ç–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    """
    text = 'pon'
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('Bebra', callback_data='bebra')
    btn2 = types.InlineKeyboardButton('Brb', callback_data='brb')
    btn3 = types.InlineKeyboardButton('Back', callback_data='back')
    markup.add(btn1, btn2, btn3)
    return markup, text

def get_grammar_response():
    """
    –°–æ–∑–¥–∞–µ—Ç Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ 'Bebra' –∏ 'Brb'.
    Returns:
        tuple: –ö–æ—Ä—Ç–µ–∂ –∏–∑ –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤:
            - markup (types.InlineKeyboardMarkup): Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏.
            - text (str): –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–º–µ—Å—Ç–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    """
    text = 'pon'
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('Bebra', callback_data='bebra')
    btn2 = types.InlineKeyboardButton('Brb', callback_data='brb')
    btn3 = types.InlineKeyboardButton('Back', callback_data='back')
    markup.add(btn1, btn2, btn3)
    return markup, text

def remove_keyboard():
    """
    –£–¥–∞–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    Returns:
        types.ReplyKeyboardRemove: –û–±—ä–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    """
    return types.ReplyKeyboardRemove()

def get_greeting():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    Returns:
        str: –¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    return (
        f"Hey there, language explorer!üïµÔ∏è‚Äç‚ôÇÔ∏è\n"
        f"üîç I'm your AR companion, here to turn every word into an experience.\n"
        f"Let's make English as real as the world around you. Ready to begin?üòä"
    )

def get_yes_response():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ 'Yes'.
    Returns:
        str: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ 'Yes'.
    """
    text = (
        f'Yes? Awesome!\n'
        f'Strap in, explorer‚Äîyour language adventure is about to soar!üåü\n'
        f'Let‚Äôs transform the everyday into something extraordinary, word by word.üöÄ'
    )
    return text

def get_no_response():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ 'No'.
    Returns:
        str: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–∞ 'No'.
    """
    return (
        f'No? Alrighty then!\n'
        f'No skin off my circuits‚Äîteaching you wasn‚Äôt exactly my life‚Äôs mission.\n'
        f'üññMaybe you‚Äôll wander back when curiosity bites. Until then, happy trails, explorer! ‚ú®'
    )